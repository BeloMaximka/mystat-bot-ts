import { MystatHomeworkStatus } from "mystat-api/dist/types.js";
import telegraf_inline from "telegraf-inline-menu";
import { Scenes } from "telegraf";
import userStore from "../../store/userStore.js";
import {
  formatMessage,
  getSessionValue,
  setSessionValue,
} from "../../utils.js";

const createBackMainMenuButtons = telegraf_inline.createBackMainMenuButtons;
const MenuTemplate = telegraf_inline.MenuTemplate;

enum HomeworkStatusTypes {
  Overdue = "üî•–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ",
  Checked = "üì©–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
  Uploaded = "üì•–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ",
  Active = "üì®–¢–µ–∫—É—â–∏–µ",
  Deleted = "üóë–£–¥–∞–ª–µ–Ω–Ω—ã–µ",
}

const homeworkStatusList = [
  HomeworkStatusTypes.Active,
  HomeworkStatusTypes.Checked,
  HomeworkStatusTypes.Uploaded,
  HomeworkStatusTypes.Overdue,
  HomeworkStatusTypes.Deleted,
];

const homeworkStatusTitles = {
  [HomeworkStatusTypes.Active]: MystatHomeworkStatus.Active,
  [HomeworkStatusTypes.Checked]: MystatHomeworkStatus.Checked,
  [HomeworkStatusTypes.Uploaded]: MystatHomeworkStatus.Uploaded,
  [HomeworkStatusTypes.Overdue]: MystatHomeworkStatus.Overdue,
  [HomeworkStatusTypes.Deleted]: MystatHomeworkStatus.Deleted,
};

async function getHomeworksByMatch(ctx: any): Promise<unknown[]> {
  const match: string = ctx.match[1];
  const homeworkStatus = homeworkStatusTitles[match as HomeworkStatusTypes];
  const homeworks = await userStore
    .get(ctx.chat?.id)
    ?.getHomeworkList(
      homeworkStatus,
      getSessionValue<number>(ctx, "page") || 1
    );
  setSessionValue<unknown[]>(ctx, "homeworks", homeworks?.data);

  return homeworks?.data;
}

const selectedHomeworkSubmenu = new MenuTemplate<any>((ctx) => {
  return ctx.match[2];
});
selectedHomeworkSubmenu.manualRow(createBackMainMenuButtons("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));

const selectedHomeworkListSubmenu = new MenuTemplate<any>(
  (ctx) => ctx.match[1]
);
selectedHomeworkListSubmenu.manualRow(async (ctx: Scenes.WizardContext) => {
  const homeworks = await getHomeworksByMatch(ctx);
  setSessionValue<number>(ctx, "page", 0);
  console.log(homeworks);

  const format = (h: any) => ({
    text: h.name_spec,
    relativePath: "hw-list:" + h.id,
  });

  return [
    homeworks.slice(0, 2).map((h) => format(h)),
    homeworks.slice(2, 4).map((h) => format(h)),
    homeworks.slice(4, 6).map((h) => format(h)),
  ];
});

selectedHomeworkListSubmenu.manualAction(
  /hw-list:(\d+)$/,
  async (ctx: any, path: string) => {
    const parts: string[] = path.split(":");
    const id: number = parseInt(parts[parts.length - 1]);
    const homeworkMenuPath: string =
      ctx.update.callback_query.data.split(/\d+/)[0]; // 'menu/hw/hw-opt:{SMTH}/hw-list:' w/o id
    console.log(ctx.update.callback_query.data, homeworkMenuPath);

    const homework = getSessionValue<any[]>(ctx, "homeworks")?.find(
      (h) => h.id === id
    );

    await ctx.editMessageText(
      formatMessage(
        `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${homework?.name_spec}`,
        `üìñ –¢–µ–º–∞: ${homework?.theme}`,
        `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${homework?.fio_teach}`,
        `üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${homework?.creation_time}`,
        `‚ùï –°–¥–∞—Ç—å –¥–æ: ${homework?.completion_time}`,
        `‚úíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${homework?.comment}`,
        `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: [—Å—Å—ã–ª–∫–∞](${homework?.file_path})`,
        `üìÇ –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: [—Å—Å—ã–ª–∫–∞](${homework?.homework_stud?.file_path})`,
        `‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ: ${
          homework?.homework_stud?.creation_time || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        }`,
        `üéâ –û—Ü–µ–Ω–∫–∞: ${homework?.homework_stud?.mark || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}`
      ),
      { parse_mode: "Markdown" }
    );

    ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [
          {
            text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data: homeworkMenuPath,
          },
        ],
      ],
    });

    return false;
  }
);

selectedHomeworkListSubmenu.pagination("hw-pg", {
  getTotalPages: async (ctx) => {
    const hwPerPage = 6;
    const hwCount = (await getHomeworksByMatch(ctx))?.length;
    const currentPage = getSessionValue<number>(ctx, "page") || 1;
    return hwCount >= hwPerPage ? currentPage + 1 : currentPage;
  },
  setPage: (ctx, page) => setSessionValue<number>(ctx, "page", page),
  getCurrentPage: (ctx) => getSessionValue<number>(ctx, "page"),
});

selectedHomeworkListSubmenu.manualRow(createBackMainMenuButtons("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));

const homeworkSubmenu = new MenuTemplate<Scenes.WizardContext>(
  () => "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
);
homeworkSubmenu.chooseIntoSubmenu(
  "hw-opt",
  homeworkStatusList,
  selectedHomeworkListSubmenu,
  { columns: 1 }
);
homeworkSubmenu.manualRow(createBackMainMenuButtons("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"));

export default homeworkSubmenu;
