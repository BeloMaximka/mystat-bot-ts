import telegraf_inline from "telegraf-inline-menu";
import { Context } from "vm";
import { getHomeworkList } from "mystat-api";
import { HomeworkStatus } from "../../types.js";
import { formatMessage, getSessionValue, getUserDataFromSession, setSessionValue } from "../../utils.js";

const createBackMainMenuButtons = telegraf_inline.createBackMainMenuButtons;
const MenuTemplate = telegraf_inline.MenuTemplate;

enum HomeworkStatusTypes {
    Overdue = '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ',
    Checked = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
    Uploaded = '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ',
    Active = '–¢–µ–∫—É—â–∏–µ',
    Deleted = '–£–¥–∞–ª–µ–Ω–Ω—ã–µ'
}

const homeworkStatusList = [
    HomeworkStatusTypes.Active,
    HomeworkStatusTypes.Checked,
    HomeworkStatusTypes.Uploaded,
    HomeworkStatusTypes.Overdue,
    HomeworkStatusTypes.Deleted
];

function getHomeworkStatusByMatch(match: string): number {
    switch (match) {
        case HomeworkStatusTypes.Active:
            return HomeworkStatus.Active;
        
        case HomeworkStatusTypes.Checked:
            return HomeworkStatus.Checked;
        
        case HomeworkStatusTypes.Deleted:
            return HomeworkStatus.Deleted;
        
        case HomeworkStatusTypes.Overdue:
            return HomeworkStatus.Overdue;
    
        case HomeworkStatusTypes.Uploaded:
            return HomeworkStatus.Uploaded;
        
        default:
            return -1;
    }
}

async function getHomeworksByMatch(ctx: Context): Promise<unknown[]> {
    const match: string = ctx.match[1];
    const homeworkStatus = getHomeworkStatusByMatch(match);
    const homeworks = await getHomeworkList(getUserDataFromSession(ctx), homeworkStatus);
    setSessionValue<unknown[]>(ctx, 'homeworks', homeworks.data);
    
    return homeworks.data;
}

const selectedHomeworkSubmenu = new MenuTemplate<Context>((ctx) => {
    console.log(ctx.match);
    
    return ctx.match[2];
});
selectedHomeworkSubmenu.manualRow(createBackMainMenuButtons('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'));

const selectedHomeworkListSubmenu = new MenuTemplate<Context>((ctx) => ctx.match[1]);
selectedHomeworkListSubmenu.manualRow(async (ctx: Context) => {
    const homeworks = await getHomeworksByMatch(ctx);

    const format = (h: any) => ({ text: h.name_spec, relativePath: 'hw-list:' + h.id });

    return [
        homeworks.slice(0, 2).map(h => format(h)),
        homeworks.slice(2, 4).map(h => format(h)),
        homeworks.slice(4, 6).map(h => format(h)),
    ];
});

selectedHomeworkListSubmenu.manualAction(/hw-list:(\d+)$/, async (ctx: Context, path: string) => {
    const parts: string[] = path.split(':');
    const id: number = parseInt(parts[parts.length - 1]);
    const homework = getSessionValue<any[]>(ctx, 'homeworks')?.find(h => h.id === id);

    await ctx.editMessageText(
        formatMessage(
            `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${homework?.name_spec}`,
            `üìñ –¢–µ–º–∞: ${homework?.theme}`,
            `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${homework?.fio_teach}`,
            `üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${homework?.creation_time}`,
            `‚ùï –°–¥–∞—Ç—å –¥–æ: ${homework?.completion_time}`,
            `‚úíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${homework?.comment}`,
            `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: [—Å—Å—ã–ª–∫–∞](${homework?.file_path})`,
            `üìÇ –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: [—Å—Å—ã–ª–∫–∞](${homework?.homework_stud?.file_path})`,
            `‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ: ${homework?.homework_stud?.creation_time || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}`,
            `üéâ –û—Ü–µ–Ω–∫–∞: ${homework?.homework_stud?.mark || '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}`
        ),
        { parse_mode: 'Markdown' }
    );

    ctx.editMessageReplyMarkup({
        inline_keyboard: [
            [
                {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    callback_data: 'menu/hw/hw-list/',
                }
            ],
        ]
    });

    return false;
});
selectedHomeworkListSubmenu.manualRow(createBackMainMenuButtons('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'));

const homeworkSubmenu = new MenuTemplate<Context>(() => '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
homeworkSubmenu.chooseIntoSubmenu('hw-opt', homeworkStatusList, selectedHomeworkListSubmenu, { columns: 1 });
homeworkSubmenu.manualRow(createBackMainMenuButtons('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'));

export default homeworkSubmenu;